"""Tests for the Azure Document Intelligence converter."""
import os
from pathlib import Path
import pytest
from unittest import mock

# Skip all tests if Azure is not available
try:
    from azure.ai.documentintelligence import DocumentIntelligenceClient
    from azure.ai.documentintelligence.models import (
        AnalyzeDocumentRequest,
        AnalyzeResult
    )
    from image2md.azure_converter import AzureDocumentConverter
    AZURE_AVAILABLE = True
except ImportError:
    AZURE_AVAILABLE = False

pytestmark = pytest.mark.skipif(not AZURE_AVAILABLE, reason="Azure SDK not installed")


@pytest.fixture
def mock_credentials():
    """Fixture for setting up mock credentials."""
    old_endpoint = os.environ.get("AZURE_ENDPOINT")
    old_api_key = os.environ.get("AZURE_API_KEY")
    
    os.environ["AZURE_ENDPOINT"] = "https://mock-endpoint.cognitiveservices.azure.com"
    os.environ["AZURE_API_KEY"] = "mock-api-key"
    
    yield
    
    # Restore original values
    if old_endpoint:
        os.environ["AZURE_ENDPOINT"] = old_endpoint
    else:
        del os.environ["AZURE_ENDPOINT"]
    
    if old_api_key:
        os.environ["AZURE_API_KEY"] = old_api_key
    else:
        del os.environ["AZURE_API_KEY"]


@pytest.fixture
def mock_result():
    """Fixture for creating a mock Azure result."""
    result = mock.MagicMock(spec=AnalyzeResult)
    result.content = "# Mock Document\n\nThis is a mock markdown document generated by Azure Document Intelligence.\n\n| Column 1 | Column 2 |\n| --- | --- |\n| Data 1 | Data 2 |\n"
    return result


class TestAzureDocumentConverter:
    """Test the Azure Document Intelligence converter."""
    
    def test_initialization_with_env_vars(self, mock_credentials):
        """Test initializing with environment variables."""
        converter = AzureDocumentConverter()
        
        assert converter.endpoint == "https://mock-endpoint.cognitiveservices.azure.com"
        assert converter.api_key == "mock-api-key"
        assert converter.api_version == "2024-11-30"
        assert converter.model_id == "prebuilt-layout"
    
    def test_initialization_with_explicit_params(self):
        """Test initializing with explicit parameters."""
        converter = AzureDocumentConverter(
            endpoint="https://custom-endpoint.cognitiveservices.azure.com",
            api_key="custom-api-key",
            api_version="2024-12-31",
            model_id="custom-model"
        )
        
        assert converter.endpoint == "https://custom-endpoint.cognitiveservices.azure.com"
        assert converter.api_key == "custom-api-key"
        assert converter.api_version == "2024-12-31"
        assert converter.model_id == "custom-model"
    
    def test_initialization_failure(self):
        """Test initialization failure when credentials are missing."""
        # Save original environment
        old_endpoint = os.environ.get("AZURE_ENDPOINT")
        old_api_key = os.environ.get("AZURE_API_KEY")
        
        # Clear environment
        if "AZURE_ENDPOINT" in os.environ:
            del os.environ["AZURE_ENDPOINT"]
        if "AZURE_API_KEY" in os.environ:
            del os.environ["AZURE_API_KEY"]
        
        try:
            with pytest.raises(ValueError):
                AzureDocumentConverter()
        finally:
            # Restore original environment
            if old_endpoint:
                os.environ["AZURE_ENDPOINT"] = old_endpoint
            if old_api_key:
                os.environ["AZURE_API_KEY"] = old_api_key
    
    def test_convert(self, tmp_path, mock_credentials, mock_result):
        """Test converting an image to markdown."""
        # Create a dummy image
        image_path = tmp_path / "test_image.png"
        image_path.touch()
        
        # Create a converter with mocked client
        converter = AzureDocumentConverter()
        
        # Mock the client's begin_analyze_document method
        mock_poller = mock.MagicMock()
        mock_poller.result.return_value = mock_result
        converter.client.begin_analyze_document = mock.MagicMock(return_value=mock_poller)
        
        # Test conversion
        markdown = converter.convert(image_path)
        
        # Verify the conversion result
        assert "# Mock Document" in markdown
        assert "| Column 1 | Column 2 |" in markdown
        
        # Verify the client was called with the right parameters
        converter.client.begin_analyze_document.assert_called_once()
        call_args = converter.client.begin_analyze_document.call_args
        assert call_args[0][0] == "prebuilt-layout"  # First arg should be model_id
        # Check for binary data in the second argument
        assert isinstance(call_args[0][1], bytes)
        assert "output_content_format" in call_args[1]
    
    def test_save_json(self, tmp_path, mock_credentials, mock_result):
        """Test saving the JSON response."""
        # Create a dummy image
        image_path = tmp_path / "test_image.png"
        image_path.touch()
        
        # Create a converter with mocked client
        converter = AzureDocumentConverter()
        
        # Mock the client's begin_analyze_document method
        mock_poller = mock.MagicMock()
        mock_poller.result.return_value = mock_result
        mock_result.as_dict.return_value = {"content": "# Mock Document", "analyzeResult": {"key": "value"}}
        converter.client.begin_analyze_document = mock.MagicMock(return_value=mock_poller)
        
        # Test conversion with JSON saving
        markdown = converter.convert(image_path, save_json=True)
        
        # Verify the conversion result
        assert "# Mock Document" in markdown
        
        # Verify the JSON file was created
        json_path = image_path.with_suffix('.json')
        assert json_path.exists()
        assert "# Mock Document" in json_path.read_text()
        assert "analyzeResult" in json_path.read_text()
        
        # Test with custom JSON path
        custom_json_path = tmp_path / "custom_output.json"
        converter.convert(image_path, save_json=True, json_output_path=custom_json_path)
        
        # Verify the custom JSON file was created
        assert custom_json_path.exists()
        assert "# Mock Document" in custom_json_path.read_text()
        assert "analyzeResult" in custom_json_path.read_text() 